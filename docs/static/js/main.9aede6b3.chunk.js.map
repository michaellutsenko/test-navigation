{"version":3,"sources":["components/MainView/MainView.module.css","components/Navigation/Navigation.module.css","App.module.css","components/PortalToBackdrop.js","routes.js","components/Navigation/Navigation.jsx","components/MainView/MainView.jsx","App.jsx","index.js"],"names":["module","exports","portalRoot","document","getElementById","portalElement","createElement","PortalToBackdrop","children","useEffect","appendChild","removeChild","ReactDOM","createPortal","id","name","Navigation","currentRoute","onNavigate","className","styles","container","onClick","event","stopPropagation","username","routes","map","route","index","key","classnames","active","href","alert","MainView","useState","showNavigationPanel","setShowNavigationPanel","showNavigationBlock","setShowNavigationBlock","setCurrentRoute","find","x","onNavigationClose","setTimeout","shifted","header","burgerIcon","caption","App","backdrop","render","StrictMode"],"mappings":"0GACAA,EAAOC,QAAU,CAAC,UAAY,4BAA4B,OAAS,yBAAyB,WAAa,6BAA6B,QAAU,4B,mBCAhJD,EAAOC,QAAU,CAAC,UAAY,8BAA8B,SAAW,+B,gBCAvED,EAAOC,QAAU,CAAC,UAAY,uBAAuB,SAAW,wB,+JCG1DC,EAAa,kBAAMC,SAASC,eAAe,gBAE3CC,EAAgBF,SAASG,cAAc,OAgB9BC,EAdU,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAWzB,OATAC,qBAAU,WAGR,OADAP,IAAaQ,YAAYL,GAClB,WAELH,IAAaS,YAAYN,OAItBO,IAASC,aAAaL,EAAUH,I,gBCnB1B,GACb,CAAES,GAAI,QAASC,KAAM,SACrB,CAAED,GAAI,OAAQC,KAAM,aACpB,CAAED,GAAI,aAAcC,KAAM,cAC1B,CAAED,GAAI,SAAUC,KAAM,gBCoCTC,EAjCI,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,aAAcC,EAAiB,EAAjBA,WAClC,OAEE,yBACEC,UAAWC,IAAOC,UAGlBC,QAAS,SAACC,GAAD,OAAWA,EAAMC,oBAG1B,yBAAKL,UAAWC,IAAOK,UAAvB,UAEA,4BACGC,EAAOC,KAAI,SAACC,EAAOC,GAAR,OACV,wBACEC,IAAKD,EACLV,UAAWY,IAAW,CAAEC,OAAQJ,EAAMd,KAAOG,IAC7CK,QAAS,kBAAMJ,EAAWU,EAAMd,MAE/Bc,EAAMb,UAOb,uBAAGkB,KAAK,IAAIX,QAAS,kBAAMY,MAAM,cAAjC,c,gBC+CSC,EAvEE,WAAM,MAEiCC,oBAAS,GAF1C,mBAEdC,EAFc,KAEOC,EAFP,OAMiCF,oBAAS,GAN1C,mBAMdG,EANc,KAMOC,EANP,OASmBJ,mBAAS,SAT5B,mBASdnB,EATc,KASAwB,EATA,KAUfb,EAAQF,EAAOgB,MAAK,SAACC,GAAD,OAAOA,EAAE7B,KAAOG,KAWpC2B,EAAoB,WAExBN,GAAuB,GAMvBO,YAAW,kBAAML,GAAuB,KAAQ,MAGlD,OAGE,yBACErB,UAAWY,IAAWX,IAAOC,UAAW,CACtCyB,QAAST,IAEXf,QAAS,SAACC,GACRc,GAAuBO,IACvBrB,EAAMC,oBAGR,yBAAKL,UAAWC,IAAO2B,QAErB,0BAAM5B,UAAWC,IAAO4B,WAAY1B,QAAS,kBA/BjDkB,GAAuB,QAGvBF,GAAuB,KA4BnB,UAIA,0BAAMnB,UAAWC,IAAO6B,SAAUrB,EAAMb,OAGzCwB,GAIC,kBAAC,EAAD,KACE,kBAAC,EAAD,CACEtB,aAAcA,EACdC,WAAY,SAACU,GACXA,GAASa,EAAgBb,GACzBgB,U,gBC/CCM,MAhBf,WACE,OACE,yBAAK/B,UAAWC,IAAOC,WAMrB,yBAAKP,GAAG,cAAcK,UAAWC,IAAO+B,WAGxC,kBAAC,EAAD,QCdNvC,IAASwC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFlD,SAASC,eAAe,W","file":"static/js/main.9aede6b3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"MainView_container__1qSu4\",\"header\":\"MainView_header__ELE9L\",\"burgerIcon\":\"MainView_burgerIcon__2VGzt\",\"caption\":\"MainView_caption__3ywSd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Navigation_container___wsPy\",\"username\":\"Navigation_username__kOjDZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"backdrop\":\"App_backdrop__1J_fz\"};","import React, {useEffect} from 'react';\nimport ReactDOM from 'react-dom';\n\n// This function returns the portal root element from the DOM\nconst portalRoot = () => document.getElementById('portal-root');\n// This element is the actual portal which will have the navigation block\nconst portalElement = document.createElement('div');\n\nconst PortalToBackdrop = ({children}) => {\n  // The effect hook helps keeping the DOM clean of leftovers\n  useEffect(() => {\n    // Append the portal to the root (backdrop) on mount\n    portalRoot().appendChild(portalElement);\n    return () => {\n      // Remove the portal from the root (backdrop) on unmount\n      portalRoot().removeChild(portalElement);\n    }\n  })\n\n  return ReactDOM.createPortal(children, portalElement);\n}\n\nexport default PortalToBackdrop","export default [\n  { id: \"start\", name: \"Start\" },\n  { id: \"cart\", name: \"Your cart\" },\n  { id: \"favourites\", name: \"Favourites\" },\n  { id: \"orders\", name: \"Your orders\" },\n]","import React from \"react\";\nimport classnames from \"classnames\";\n\nimport styles from \"./Navigation.module.css\";\nimport routes from \"../../routes\";\n\n// This is the navigation block. Nothing fancy here\nconst Navigation = ({ currentRoute, onNavigate }) => {\n  return (\n\n    <div\n      className={styles.container}\n      // As it's inside a portal, all events will be propagated\n      // to the parent component. We don't want that behaviour\n      onClick={(event) => event.stopPropagation()}\n    >\n      {/* Hi Viktor! */}\n      <div className={styles.username}>Viktor</div>\n\n      <ul>\n        {routes.map((route, index) => (\n          <li\n            key={index}\n            className={classnames({ active: route.id === currentRoute })}\n            onClick={() => onNavigate(route.id)}\n          >\n            {route.name}\n          </li>\n        ))}\n      </ul>\n\n      {/* There's no specified behaviour for pressing \"Sign out\", so I'm emulating\n      signing out with a little alert */}\n      <a href=\"#\" onClick={() => alert(\"Goodbye!\")}>\n        Sign Out\n      </a>\n    </div>\n  );\n};\n\nexport default Navigation;\n","import React, { useState } from \"react\";\nimport classnames from \"classnames\";\n\nimport PortalToBackdrop from \"../PortalToBackdrop\";\nimport Navigation from \"../Navigation/Navigation\";\n\nimport styles from \"./MainView.module.css\";\nimport routes from \"../../routes\";\n\nconst MainView = () => {\n  // Using state hook to define whether the navigation panel is shown\n  const [showNavigationPanel, setShowNavigationPanel] = useState(false);\n\n  // Using state hook to define whether the navigation block is shown\n  // on the navigation panel. This is for a visually smooth transition\n  const [showNavigationBlock, setShowNavigationBlock] = useState(false);\n\n  // Using state hook to emulate navigation between routes\n  const [currentRoute, setCurrentRoute] = useState(\"start\");\n  const route = routes.find((x) => x.id === currentRoute);\n\n  // This function is to keep things DRY\n  const onNavigationOpen = () => {\n    // Render the navigation block (this will result in a complete lifecycle for navigation)\n    setShowNavigationBlock(true);\n\n    // Show the navigation panel\n    setShowNavigationPanel(true);\n  };\n\n  const onNavigationClose = () => {\n    // Hide the panel first, the transition takes .2 seconds\n    setShowNavigationPanel(false);\n\n    // Unmount the navigation block once it's visually hidden.\n    // Note that we don't do this on opening the navigation panel\n    // because we want it to appear as if the navigation block is always\n    // there, while in reality we're only rendering it when the panel is open\n    setTimeout(() => setShowNavigationBlock(false), 300); // .1 extra second just in case :)\n  };\n\n  return (\n    // The container element will function as the \"close navigation\" button\n    // when the navigation panel is open\n    <div\n      className={classnames(styles.container, {\n        shifted: showNavigationPanel,\n      })}\n      onClick={(event) => {\n        showNavigationPanel && onNavigationClose();\n        event.stopPropagation();\n      }}\n    >\n      <div className={styles.header}>\n        {/* &#9776; is the Unicode hamburger icon glyph */}\n        <span className={styles.burgerIcon} onClick={() => onNavigationOpen()}>\n          &#9776;\n        </span>\n\n        <span className={styles.caption}>{route.name}</span>\n      </div>\n\n      {showNavigationBlock && (\n        // Using the portal here. The Navigation block is rendered\n        // by this component, but in the DOM it will appear inside the\n        // backdrop, where it's technically supposed to be.\n        <PortalToBackdrop>\n          <Navigation\n            currentRoute={currentRoute}\n            onNavigate={(route) => {\n              route && setCurrentRoute(route);\n              onNavigationClose();\n            }}\n          />\n        </PortalToBackdrop>\n      )}\n    </div>\n  );\n};\n\nexport default MainView;\n","import React from 'react';\n\nimport MainView from './components/MainView/MainView';\n\n// I prefer the CSS Modules approach and\n// create-react-app has it out of the box\nimport styles from \"./App.module.css\";\n\nfunction App() {\n  return (\n    <div className={styles.container}>\n      \n      {/* I'm using react portals to keep the DOM nice and clean.\n      This div functions as the purple backdrop and also\n      the portal root, to which the contents of the navigation\n      block will pe appended */}\n      <div id=\"portal-root\" className={styles.backdrop}></div>\n      \n      {/* The main \"sliding\" view */}\n      <MainView />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}